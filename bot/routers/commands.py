from aiogram import F, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.types import ReactionTypeEmoji
from contextlib import suppress
import time
from tortoise.expressions import Q

from .. import markups
from ..bot import bot
from ..filters.registered import SupportFilter
from ..services.database.models import BotUser, UserChat, Order, ProfitUserChat, TimerMessage, ProfitUser, OrderStatic, Delivery, SupportUserChat, TaskQueue, Notify
from ..enums import ChatRole, OrderStatus, TaskQueueType, ChatDepositNotify
from ..utils.router import Router
from . import root_handlers_router
from ..state import Action
from ..callback_data import TimerActionCallbackData
from tortoise.functions import Sum
from datetime import datetime, timedelta
from pytz import timezone
from .chat import get_stats, start_day, migrate_chat_id, number_or, create_delivery_markup, create_order, can_convert_to_float, filter_amount, amount_fm, get_rates_order

router = Router()
root_handlers_router.include_router(router)

@router.message(F.chat.type != "private", F.text.lower() == '/start', SupportFilter(support=True))
async def start_handler(message: types.Message, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()
    if user_chat:
        if user_chat.type == ChatRole.none:
            return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã –≤ –õ–° –±–æ—Ç–∞")
        try:
            await start_day(user_chat)
        except Exception as e:
            if hasattr(e, "migrate_to_chat_id"):
                new_user_chat = await migrate_chat_id(user_chat, e.migrate_to_chat_id)
                try:
                    await start_day(new_user_chat)
                except Exception as e:
                    code = str(e).split(": ")[1].capitalize() if len(str(e).split(": ")) > 1 else "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                    text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≥—Ä—É–ø–ø–æ–π <b>{user_chat.name}</b>\n\n–ö–æ–¥: {code}".format(user_chat=user_chat, code=code)
                    await bot.send_message(bot_user.id, text)
            else:
                code = str(e).split(": ")[1].capitalize() if len(str(e).split(": ")) > 1 else "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                if code == "–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞, –≥—Ä—É–ø–ø–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å":
                    await message.answer("‚ùóÔ∏è–û—à–∏–±–∫–∞: {code}".format(code=code))
                text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≥—Ä—É–ø–ø–æ–π <b>{user_chat.name}</b>\n\n–ö–æ–¥: {code}".format(user_chat=user_chat, code=code)
                await bot.send_message(bot_user.id, text)

@router.message(F.chat.type != "private", F.text.find("/adm") == 0, SupportFilter(support=True))
async def create_support_in_chat_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()
    if user_chat:
        usernames = list(filter(None,message.text.replace("/adm ", "").replace("/adm ", "").replace("@", "").split(" ")))
        for username in usernames:
            other_user = await BotUser.filter(username=username).first()
            if username == message.from_user.username:
                await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞, –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è")
            elif other_user is None:
                support_user_chat = await SupportUserChat.filter(bot_user=user_chat.bot_user, username=username).first()
                if support_user_chat:
                    await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è @{username}".format(username=username))
                else:
                    support_user_chat = await SupportUserChat.create(
                            bot_user=user_chat.bot_user, 
                            other_bot_user=bot_user,
                            username=username
                        )
                    await message.answer("‚úÖ –°–∞–ø–ø–æ—Ä—Ç @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫".format(username=username))
            else:
                support_user_chat = await SupportUserChat.filter(bot_user=user_chat.bot_user, other_bot_user=other_user).first()
                if support_user_chat:
                    await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è @{username}".format(username=username))
                else:
                    support_user_chat = await SupportUserChat.create(
                            bot_user=user_chat.bot_user, 
                            other_bot_user=other_user
                        )
                    await message.answer("‚úÖ –°–∞–ø–ø–æ—Ä—Ç @{other_user.username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫".format(other_user=other_user))

@router.message(F.chat.type != "private", F.text.find("/set_profit") == 0, SupportFilter(support=True))
async def create_pending_order_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()
    profit_user_chat = await ProfitUserChat.filter(user_chat=user_chat).first()
    
    if profit_user_chat:
        return await message.answer("–î–∞–Ω–Ω—ã–π —á–∞—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ <b>–†–µ–∑–∞–∫ –ö–∞–ø—É—Å—Ç—ã</b>")
    if user_chat.type == ChatRole.cc:
        explode_data = message.text.split(" ")
        profit_user = await ProfitUser.filter(uuid=explode_data[1]).prefetch_related("bot_user").first()
        if profit_user:
            if profit_user.bot_user_id == user_chat.bot_user_id:
                return await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞")
            await ProfitUserChat.create(
                bot_user=profit_user.bot_user,
                user_chat=user_chat
            )
            text="‚úÖ –ß–∞—Ç <b>{chat_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–¥—É–ª—å <b>–†–µ–∑–∞–∫ –ö–∞–ø—É—Å—Ç—ã</b>, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}\n\n<i>‚ùï –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –≤–æ–∑–Ω–æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–†–µ–∑–∞–∫ –∫–∞–ø—É—Å—Ç—ã</b></i>".format(chat_name=user_chat.name,username=profit_user.bot_user.username)
            await bot.send_message(user_chat.bot_user.id, text, reply_markup=markups.skip_markup)
            await message.answer("‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")

@router.message(F.chat.type != "private", F.text.lower() == '/help')
async def help_handler(message: types.Message,  bot_user: BotUser):
    text = ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —á–∞—Ç–∞:\n\n<b>‚úîÔ∏è(–ë–∞–Ω–∫) (–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è) (–§–∞–º–∏–ª–∏—è –¥—Ä–æ–ø–∞/–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã )(2 –±—É–∫–≤—ã –∏–º–µ–Ω–∏ —Å–∞–ø–ø–æ—Ä—Ç–∞) (—Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö) (–∏–º—è —Å–∞–ø–ø–æ—Ä—Ç–∞)</b> ‚Äì –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞–≤–∏—Ç –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å ¬´–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞¬ª. –≠—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å—Ç–æ—Ä–æ–Ω–∞ –ë –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–æ –µ—â–µ –Ω–µ –≤—ã–ø–ª–∞—Ç–∏–ª–∞ –¥–æ–ª—é —Å—Ç–æ—Ä–æ–Ω–µ –ê. –ü—Ä–∏–º–µ—Ä: <code>‚úîÔ∏è–ê–ª—å—Ñ–∞ –ö–µ—à–∏–Ω –ö–æ–∑–ª–æ–≤ 300.000</code> –∏–ª–∏ <code>‚úîÔ∏è–ê–ª—å—Ñ–∞ –ö–µ—à–∏–Ω –ö–æ–∑–ª–æ–≤ 300.000 –õ–µ–±–æ–≤—Å–∫–∏–π</code>\n\n<b>‚úÖ#(–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏)</b> - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞–≤–∏—Ç –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å ¬´–û–ø–ª–∞—á–µ–Ω–æ¬ª. –≠—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å—Ç–æ—Ä–æ–Ω–∞ –ë –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –∏ –æ–ø–ª–∞—Ç–∏–ª–∞ –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É —Å—Ç–æ—Ä–æ–Ω–µ –ê. –ü—Ä–∏–º–µ—Ä: <code>‚úÖ#77</code>\n\n<b>‚è≥(–ë–∞–Ω–∫) (–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è) (–§–∞–º–∏–ª–∏—è –¥—Ä–æ–ø–∞) (—Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö)</b> - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞–≤–∏—Ç –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å ¬´–í –æ–∂–∏–¥–∞–Ω–∏–∏¬ª. –≠—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å—Ç–æ—Ä–æ–Ω–∞ –ê –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –≤—ã–¥–∞–Ω–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç, –Ω–æ —Å—Ç–æ—Ä–æ–Ω–∞ –ë –¥–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∞. –ó–∞—è–≤–∫–∏ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –Ω–∞ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏, –ø–æ–∫–∞ —Å—Ç–æ—Ä–æ–Ω–∞ –ë –Ω–µ –∏–∑–º–µ–Ω–∏—Ç –¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏. –ü—Ä–∏–º–µ—Ä: <code>‚è≥–ê–ª—å—Ñ–∞ –ö–µ—à–∏–Ω –ö–æ–∑–ª–æ–≤ 300.000</code>\n\n<b>üö´#(–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏)</b> - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –∏–∑ —Å—Ç–∞—Ç—ã –≤ –∑–∞–∫—Ä–µ–ø–µ. –ü—Ä–∏–º–µ—Ä: <code>üö´#77</code>\n\n<b>‚úçÔ∏è(–ë–∞–Ω–∫) (—Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö)</b> - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ.. –ü—Ä–∏–º–µ—Ä: <code>‚úçÔ∏è–ê–ª—å—Ñ–∞ 30%</code>\n\n<b>‚úçÔ∏è(–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏) (–ø—Ä–æ—Ü–µ–Ω—Ç)</b> - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ –æ–ø—Ä–µ–¥–µ–ª–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ... –ü—Ä–∏–º–µ—Ä: <code>‚úçÔ∏è#77 15.00%</code>\n\n<b>üîÑ(–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏) (—Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö)</b> - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∑—è–≤–∫–µ... –ü—Ä–∏–º–µ—Ä: <code>üîÑ#77 100.000</code>\n\n<b>üí±(–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏) (–∫—É—Ä—Å)</b> - –¥–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –∏–∑–º–µ–Ω—è–µ—Ç –∫—É—Ä—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–Ω–Ω–æ–π –≤—ã–ø–ª–∞—á–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ... –ü—Ä–∏–º–µ—Ä: <code>üí±#77 92.54</code>")
    await message.answer(text=text)

@router.message(F.chat.type != "private", F.text.lower() == '/botinfo')
async def bot_info_handler(message: types.Message, bot_user: BotUser):
    text = "/gameinfo - –ø—Ä–∞–≤–∏–ª—ã –∏–≥—Ä—ã\n/help - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∏—Ö"
    await message.answer(text=text)

@router.message(F.chat.type != "private", F.text.lower() == '/gameinfo')
async def game_info_handler(message: types.Message, bot_user: BotUser):
    text = "–ü—Ä–∞–≤–∏–ª–æ –∏–≥—Ä—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –Ω–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /game"
    await message.answer(text=text)

@router.message(F.chat.type != "private", F.text.lower() == '/stats')
async def stats_handler(message: types.Message, bot_user: BotUser):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:"
    await message.answer(text=text, reply_markup=markups.user_chat_filter_stats_markup)

@router.message(F.chat.type != "private", F.text.lower().find("#—Ä–µ–∫") != -1)
async def send_rek_handler(message: types.Message, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()    
    if user_chat.bot_user.function_rek:
        delivery = await Delivery.filter(bot_user=user_chat.bot_user).all()
        if len(delivery) > 0:
            delivery_data = list()
            for deliv in delivery:
                deliv_orders = await Order.filter(delivery_id=deliv.id).all().annotate(total=Sum("amount")).first().values("total")
                order_sum = number_or(deliv_orders['total'])
                data = "{bank} {order_sum}/{limit}".format(
                    bank=deliv.bank_name, 
                    order_sum=order_sum if order_sum < 1000000 else "{order_sum}–∫–∫".format(order_sum=str(order_sum/1000000).replace(".0", "")),
                    limit=deliv.limit if deliv.limit < 1000000 else "{limit}–∫–∫".format(limit=str(deliv.limit/1000000).replace(".0", ""))
                    )
                delivery_data.append({"data": data, "id": deliv.id})
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup= await create_delivery_markup(delivery_data))
        else:
           await message.answer("–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@router.message(F.chat.type != "private", F.text.lower().find("#–¥–∞–π") != -1)
async def start_timer_handler(message: types.Message, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()    
    if user_chat.bot_user.function_day:
        start_time = time.time()
        end_time = start_time + 180
        timer = await TimerMessage.create(
            user_chat=user_chat,
            start_time=start_time,
            end_time=end_time
        )
        day_function_markup = (
            InlineKeyboardBuilder()
            .button(text="‚úÖ –£—Å–ø–µ–ª", callback_data=TimerActionCallbackData(action='done', timer_id=timer.id).pack())
            .button(text="‚ûï –ï—â–µ 3 –º–∏–Ω", callback_data=TimerActionCallbackData(action='add_minutes', timer_id=timer.id).pack())
            .button(text="üö´ –ù–µ—Ç —Ç–∞–∫–æ–≥–æ", callback_data=TimerActionCallbackData(action='cancel', timer_id=timer.id).pack())
            .adjust(1, repeat=True)
            .as_markup()
        )
        timer_message = await message.answer("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—à–µ–Ω, —É –≤–∞—Å –∞—Å—Ç–∞–ª–æ—Å—å: 3:00–º.", reply_markup=day_function_markup)
        timer.message_id = timer_message.message_id
        await timer.save()
        await message.react([ReactionTypeEmoji(emoji="üî•")])

@router.message(F.chat.type != "private", F.text.find("‚èπ") == 0, SupportFilter(support=True))
async def stop_notify_deposit_limit_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()    
    user_chat.notify_deposit = ChatDepositNotify.disabled
    await user_chat.save()
    await message.answer("‚úÖ–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ")

@router.message(F.chat.type != "private", F.text.find("üè¶") == 0, SupportFilter(support=True))
async def create_deposit_limit_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    data = message.text.replace("üè¶ ", "").replace("üè¶", "").lstrip()
    if data.find("$") != -1:
        amount = int(await get_rates_order() * int(data.replace(".", "").replace("$", "")))
    else:
        amount = int(data.replace(".", ""))
    # await message.answer(amount)
    if can_convert_to_float(amount):
        user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()    
        user_chat.limit = amount
        user_chat.notify_deposit = ChatDepositNotify.active
        await user_chat.save()
        notify = await Notify.filter(user_chat=user_chat).first()
        if notify:
            await notify.delete()
        await message.answer("‚úÖ –î–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É <b>{amount}‚ÇΩ</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω".format(amount=amount_fm(amount)))
        await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)
    else:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(F.chat.type != "private", F.text.find("‚úçÔ∏è") == 0, SupportFilter(support=True))
async def create_static_order_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()    
    data = message.text.replace("%", "").replace("‚úçÔ∏è ", "").replace("‚úçÔ∏è", "").lstrip()
    list_data = data.split("\n")
    for data in list_data:
        if can_convert_to_float(data):
            user_chat.commission = data
            await user_chat.save()
            await message.answer("‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç–∞ —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {commission}%".format(commission=user_chat.commission))
            return await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)
        elif data.find("#") == 0:
            split_data = data.replace("#", "").split(" ")
            if can_convert_to_float(split_data[0]) and can_convert_to_float(split_data[1] and len(split_data) == 2):
                order = await Order.filter(
                    Q(Q(user_chat=user_chat), Q(other_user_chat=user_chat), join_type="OR"),
                    id=split_data[0]).first()
                if order:
                    if user_chat.type == ChatRole.writer:
                        order.other_fine = float(split_data[1])
                    else:
                        order.fine = float(split_data[1])
                    await order.save()
                    if order.status == OrderStatus.paid:
                        await get_stats(user_chat, True, [order.id])
        else:
            split_data = list(filter(None, data.split(" ")))
            last_index = len(split_data) - 1
            if can_convert_to_float(split_data[last_index]):
                commission = split_data[last_index]
                del split_data[last_index]
                bank_name = " ".join(map(str, split_data)).strip()
                if bank_name[1] == " ":
                    bank_name = bank_name[2:]
                order_static = await OrderStatic.filter(user_chat=user_chat, bank=bank_name.upper()).first()
                if order_static:
                    order_static.commission = commission
                else:
                    order_static = OrderStatic(
                        user_chat=user_chat,
                        bank=bank_name.upper(),
                        commission=commission
                    )
                await order_static.save()
                await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è {bank} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã".format(bank=order_static.bank))
                orders = await Order.filter(user_chat=user_chat, created_date__gte=user_chat.started_date, status__in=[OrderStatus.confirm, OrderStatus.pending])
                if orders:
                    for order in orders:
                        if order.bank.upper() == order_static.bank:
                            if user_chat.type == ChatRole.writer:
                                order.other_fine = float(split_data[1])
                            else:
                                order.fine = float(split_data[1])
                            order.is_static = True
                            await order.save()
            else:
                return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)
    await message.react([ReactionTypeEmoji(emoji="üî•")])

@router.message(F.chat.type != "private", F.text.find("‚è≥") == 0, SupportFilter(support=True))
async def create_pending_order_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()    
    data =  message.text.lstrip().replace("#", "").replace("‚è≥", "").lstrip()
    list_data = data.split("\n")
    for data in list_data:
        result = await create_order(user_chat, bot_user, data, OrderStatus.pending)
        if result == -1:
            return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        if result == 0:
            return await message.answer("–ù–µ –ø–æ–¥—Ö–æ–¥—è—à–∏–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)
    #reaction = list(ReactionTypeEmoji(type=ReactionTypeType.EMOJI, emoji="üëç"))
    #await bot.set_message_reaction(user_chat.id, message.message_id, reaction, is_big=False)
    await message.react([ReactionTypeEmoji(emoji="üî•")])
    await message.answer("#{order_id}".format(order_id=result))

@router.message(F.chat.type != "private", F.text.find("‚úÖ") == 0, SupportFilter(support=True))
async def create_pending_order_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id, type=ChatRole.cc).prefetch_related("bot_user").first()  
    if user_chat:  
        order_id = message.text.replace("#", "").replace("‚úÖ", "").replace("‚úÖ ", "").lstrip()
        list_data = order_id.split("\n")
        is_reaction = False
        for order_id in list_data:
            if order_id.isnumeric():
                order = await Order.filter(id=order_id).prefetch_related("other_user_chat").first()
                if order is None:
                    return await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                order.fine = 0
            else:
                split_data = order_id.replace("%", "").split(" ")
                order = await Order.filter(id=split_data[0]).prefetch_related("other_user_chat").first()
                if order is None:
                    return await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                order.fine = split_data[1]
            if order:
                if order.user_chat_id == user_chat.id:
                    return await message.answer("–î–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É")
                if order.user_chat_id != order.other_user_chat_id:
                    return await message.answer("–î–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É")
                if order.user_chat_id == order.other_user_chat_id:
                    old_user_chat = 0
                else:
                    old_user_chat = order.user_chat_id
                order.created_date = datetime.now(timezone(bot.config.timezone))
                # order.bot_user = bot_user
                order.user_chat = user_chat
                #order.status = OrderStatus.paid
                order.other_bot_user = bot_user
                await order.save()
                await order.other_user_chat.fetch_related("bot_user")
                if not is_reaction:
                    await message.react([ReactionTypeEmoji(emoji="üî•")])
                if old_user_chat:
                    with suppress(Exception):
                        old_user_chat = await UserChat.filter(id=old_user_chat).prefetch_related("bot_user").first()  
                        await bot.edit_message_text(chat_id=old_user_chat.id, text=await get_stats(old_user_chat), message_id=old_user_chat.secured_id, reply_markup=markups.set_rates_markup)
                with suppress(Exception):
                    await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)
                with suppress(Exception):
                    await bot.edit_message_text(chat_id=order.other_user_chat.id, text=await get_stats(order.other_user_chat), message_id=order.other_user_chat.secured_id, reply_markup=markups.set_rates_markup)
            else:
                await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)
    else:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–µ–¥–Ω–æ–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)

@router.message(F.chat.type != "private", F.text.find("üîÑ") == 0, SupportFilter(support=True))
async def update_amount_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()    
    data = message.text.replace("#", "").replace("üîÑ", "").replace("üîÑ ", "").lstrip()
    list_data = data.split("\n")
    is_reaction = False
    for data in list_data:
        split_data = data.split(" ")
        if split_data[0].isnumeric() and len(split_data) == 2:
            order = await Order.filter(
                Q(Q(user_chat=user_chat), Q(other_user_chat=user_chat), join_type="OR"),
                id=split_data[0]).first()
            if order:
                order.amount = filter_amount(split_data[1])
                await order.save()
                if not is_reaction:
                    await message.react([ReactionTypeEmoji(emoji="üî•")])
                    is_reaction = True
                if order.status == OrderStatus.paid:
                    text = await get_stats(user_chat, True, [order.id])
                else:
                    text = await get_stats(user_chat)
                await bot.edit_message_text(chat_id=user_chat.id, text=text, message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)
            else:
                await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞")
                await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)


@router.message(F.chat.type != "private", F.text.find("üí±") == 0, SupportFilter(support=True))
async def update_amount_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()    
    data = message.text.replace("#", "").replace("üí±", "").replace("üí± ", "").lstrip()
    list_data = data.split("\n")
    is_reaction = False
    for data in list_data:
        split_data = data.split(" ")
        if split_data[0].isnumeric() and len(split_data) == 2:
            order = await Order.filter(
                Q(Q(user_chat=user_chat), Q(other_user_chat=user_chat), join_type="OR"),
                id=split_data[0],
                status=OrderStatus.paid).first()
            if order:
                user_chat.rates = float(split_data[1])
                await user_chat.save()
                if not is_reaction:
                    await message.react([ReactionTypeEmoji(emoji="üî•")])
                    is_reaction = True
                text = await get_stats(user_chat, True, [order.id])
                await bot.edit_message_text(chat_id=user_chat.id, text=text, message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)
            else:
                await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞")
                await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)

@router.message(F.chat.type != "private", F.text.find("‚úîÔ∏è") == 0, SupportFilter(support=True))
async def create_confirm_order_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()
    data = message.text.replace("#", "").replace("‚úîÔ∏è", "").replace("‚úîÔ∏è ", "").lstrip()
    list_data = data.split("\n")
    is_reaction = False
    for data in list_data:
        if can_convert_to_float(data):
            order = await Order.filter(Q(Q(user_chat=user_chat), Q(other_user_chat=user_chat), join_type="OR"),id=data).first()
            if order:
                if order.status == OrderStatus.pending:
                    order.created_date = datetime.now(timezone(bot.config.timezone))
                order.status = OrderStatus.confirm
                await order.save()
        else:
            result = await create_order(user_chat, bot_user, data, OrderStatus.confirm)
            if result == -1:
                return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            if result == 0:
                return await message.answer("–ù–µ –ø–æ–¥—Ö–æ–¥—è—à–∏–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)
        if not is_reaction:
            await message.react([ReactionTypeEmoji(emoji="üî•")])
            await message.answer("#{order_id}".format(order_id=result))
            is_reaction = True
@router.message(F.chat.type != "private", F.text.find("üö´") == 0, SupportFilter(support=True))
async def remove_order_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()    
    data = message.text.replace("#", "").replace("üö´", "").replace("üö´ ", "").lstrip()
    list_data = data.split("\n")
    is_reaction = False
    for order_id in list_data:
        if order_id.isnumeric():
            order = await Order.filter(Q(Q(user_chat=user_chat), Q(other_user_chat=user_chat), join_type="OR"),id=order_id).prefetch_related("user_chat").prefetch_related("other_user_chat").first()
            if order:
                other_user_chat = False
                if order.user_chat_id != order.other_user_chat_id:
                    if user_chat.id == order.user_chat_id:
                        other_user_chat = order.other_user_chat_id
                        order.fine = order.other_fine
                        order.user_chat_id = other_user_chat
                    else:
                        other_user_chat = order.user_chat_id
                        order.other_user_chat_id = other_user_chat
                    await order.save()
                else:
                    await order.delete()
                if not is_reaction:
                    await message.react([ReactionTypeEmoji(emoji="üî•")])
                    is_reaction = True
                await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)
                if other_user_chat:
                    user_chat = await UserChat.filter(id=other_user_chat).prefetch_related("bot_user").first()    
                    await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)
            else:
                await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞")
                await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)

@router.message(Action.wait_scrap_set_rates, F.text, SupportFilter(support=True))
async def wait_scrap_set_rates_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()
    is_set_rates = True if len(list(filter(None, message.text.split("\n")[0].split(" ")))) == 2 else False
    if is_set_rates:
        other_split_data = message.text.replace("#", "").split("\n")
        scrap_orders = []
        for data in other_split_data:
            order_data = data.split(" ")
            order = await Order.filter(
                Q(Q(user_chat=user_chat), Q(other_user_chat=user_chat), join_type="OR"),
                id=order_data[0]).first()
            if order is None:
                return await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", reply_markup=markups.cancel_set_rates_markup)
            scrap_orders.append(order_data[0])
            if user_chat.type == ChatRole.writer:
                order.other_rates = order_data[1]
            else:
                order.rates = order_data[1]
            await order.save()
        all_amount = 0
        text = "üßë‚Äçüíª –§–æ—Ä–º—É–ª–∞:"
        step_rates = user_chat.step_rates + 1
        for order_id in scrap_orders:
            order = await Order.filter(id=order_id).first()
            if user_chat.type == ChatRole.writer:
                user_chat.rates = order.other_rates
            else:
                user_chat.rates = order.rates
            await user_chat.save()
            text += str(await get_stats(user_chat, True, [order.id], step_rates)).replace("üßë‚Äçüíª –§–æ—Ä–º—É–ª–∞:", "")
            order = await Order.filter(id=order_id).first()
            if user_chat.type == ChatRole.writer:
                all_amount += order.other_profit_amount
            else:
                all_amount += order.profit_amount
        await state.clear()
        text = "{text} <code>\n\n–¢–æ—Ç–∞–ª: {all_amount}$</code>".format(text=text, all_amount=round(all_amount, 2))
        await message.answer(text)
        try:
            await bot.edit_message_text(chat_id=user_chat.id, text=await get_stats(user_chat), message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)
        finally:
            await task_queue_checker(user_chat)
    else:
        split_data = message.text.replace(",", "").replace("#", "").split("\n")
        for order_id in split_data:
            order = await Order.filter(
                Q(Q(user_chat=user_chat), Q(other_user_chat=user_chat), join_type="OR"),
                id=order_id).first()
            if order is None:
                return await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", reply_markup=markups.cancel_set_rates_markup)
        await state.set_data({"scrap_orders": split_data})
        await state.set_state(Action.wait_set_rates)  
        text="–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å:"
        await message.answer(text, reply_markup=markups.cancel_set_rates_markup)

@router.message(Action.wait_set_rates, F.text, SupportFilter(support=True))
async def wait_set_rates_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    if can_convert_to_float(message.text):
        current_state = await state.get_data()
        await state.clear()
        user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()
        user_chat.rates = message.text
        await user_chat.save()
        await message.answer("‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        text = await get_stats(user_chat, True, current_state['scrap_orders']) if "scrap_orders" in current_state else await get_stats(user_chat, True)
        try:
            await bot.edit_message_text(chat_id=user_chat.id, text=text, message_id=user_chat.secured_id, reply_markup=markups.set_rates_markup)
        finally:
            await task_queue_checker(user_chat=user_chat)
             

def filter_data(data: str):
    return data[2:].lstrip().replace("#", "")


async def task_queue_checker(user_chat: UserChat):
    order = await Order.filter(user_chat=user_chat, created_date__gte=user_chat.started_date, status=OrderStatus.confirm).first()
    if order is None:
        task_queue = await TaskQueue.filter(user_chat=user_chat, type=TaskQueueType.start_day, status=1).first()
        if task_queue:
            task_queue.status=0
            await task_queue.save()
            await start_day(user_chat=user_chat)