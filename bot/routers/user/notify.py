from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F, types
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext


from ... import markups
from ...bot import bot
from ...state import Action
from . import router
from ...callback_data import AnswerCallbackData, UserChatCallbackData
from ...services.database.models import BotUser, UserChat, UserChatAdvertising
from ...enums import ChatRole

router.message.filter(F.chat.type == "private")


acd = AnswerCallbackData(action='demo')

@router.callback_query(AnswerCallbackData.filter(F.action == 'notification'))
async def notification_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await bot.edit_message_text(
        text="<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=markups.notify_markup
    )

@router.callback_query(AnswerCallbackData.filter(F.action == 'select_notification_chat'))
async def notification_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    user_chats = await UserChat.filter(bot_user=bot_user, type=ChatRole.writer).all()
    if len(user_chats) == 0:
        return await callback.answer("üö´ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", True)

    await bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=await create_notify_chats_markup(user_chats)
    )

@router.callback_query(AnswerCallbackData.filter(F.action == 'notification_instruction'))
async def instruction_notification_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await callback.answer("‚ùï –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø–µ—Ä–µ–ª–∏–≤–∞–º–∏, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –∫–∏–¥–æ–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ª—å—â–∏–∫–æ–≤", True)

@router.callback_query(UserChatCallbackData.filter(F.action == 'edit_notify_chat_data'))
async def edit_notify_chat_data_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await state.set_state(Action.wait_notify_chat_data)
    await state.set_data({"message_id": callback.message.message_id, "chat_id": callback_data.id, "type": callback_data.data})
    await bot.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –¥–µ–ø–æ–∑–∏—Ç –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç –≤–∞—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ–± —ç—Ç–æ–º.\n\n–ü—Ä–∏–º–µ—Ä: 10.00.000",
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=markups.cancel_markup
        )
    
@router.message(Action.wait_notify_chat_data)
async def wait_notify_chat_data_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    state_date = await state.get_data()
    user_chat = await UserChat.filter(id=state_date['chat_id']).first()
    if user_chat is None:
        await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=markups.cancel_markup)
    else:
        amount = message.text.replace(".", "")
        if amount.isnumeric():
            user_chat.notify_limit = amount
            await user_chat.save()

            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            return await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", reply_markup=markups.cancel_markup)
    await state.clear()
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <b>" + message.from_user.first_name + "</b>!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è üëá" 
    await message.answer( text, reply_markup=markups.main_menu_markup )   

    await bot.delete_message(
        bot_user.id,
        state_date["message_id"]
    )

async def create_notify_chats_markup(chats):
    markup = (
        InlineKeyboardBuilder()
        .add(*(types.InlineKeyboardButton(
            text="{chat.name}|{chat.commission}%|{chat.notify_limit}|{chat.comment}".format(chat=chat),
            callback_data=UserChatCallbackData(action='edit_notify_chat_data', data="writer", id=chat.id).pack(),
        ) for chat in chats))
        .button(text="–ù–∞–∑–∞–¥", callback_data=AnswerCallbackData(action='notification').pack())
        .adjust(1, repeat=True)
        .as_markup()
    )
    return markup