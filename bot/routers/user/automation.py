from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F, types
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext


from ... import markups
from ...bot import bot
from ...state import Action
from . import router
from ...callback_data import AnswerCallbackData, UserChatCallbackData, DeliveryCallbackData
from ...services.database.models import BotUser, UserChat, Delivery
from ...enums import ChatRole

acd = AnswerCallbackData(action='demo')


@router.callback_query(AnswerCallbackData.filter(F.action == 'automation'))
async def automation_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await bot.edit_message_text(
        text="<b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=markups.automation_markup
    )

@router.callback_query(UserChatCallbackData.filter(F.action == 'automation_selected_chat'))
async def other_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await state.clear()
    user_chat = await UserChat.filter(id=callback_data.id).first()
    if user_chat.type == ChatRole.rek:
        return await callback.answer("‚ùï –î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π", True)
    user_chat.type = ChatRole.rek
    await user_chat.save()
    await callback.answer("‚úÖ –ì—Ä—É–ø–ø–∞ {chat.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –≤ –≥—Ä—É–ø–ø–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã".format(chat=user_chat), True)
    await automation_handler(callback, callback_data, state, bot_user)
    # delivery = await Delivery.filter(user_chat=user_chat).all()
    # await bot.edit_message_text(
    #     text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
    #     chat_id=callback.message.chat.id,
    #     message_id=callback.message.message_id,
    #     reply_markup= await create_delivery_markup(delivery, user_chat)
    # )

@router.callback_query(AnswerCallbackData.filter(F.action == 'automation_add_rek'))
async def automation_inclode_bot_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await bot.edit_message_text(
        text="<b>–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=markups.automation_include_bot_markup
    )


@router.callback_query(AnswerCallbackData.filter(F.action == 'automation_select_add_rek'))
async def automation_inclode_bot_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(bot_user=bot_user, type__in=[ChatRole.none, ChatRole.rek]).all()
    await bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=await create_user_chat_markup(user_chat)
    )

@router.callback_query(AnswerCallbackData.filter(F.action == 'instruction_function_rek'))
async def instruction_function_rek_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await callback.answer("‚ùï –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –≤—ã–¥–∞–≤–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ. –î–ª—è —ç—Ç–æ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º", True)

@router.callback_query(AnswerCallbackData.filter(F.action == 'instruction_function_day'))
async def instruction_function_day_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await callback.message.edit_text(
            text="‚ùï –ß—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å –∫ —Å–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å –∏ –¥–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º, –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.\n\n–£—Å–ª–æ–≤–∏—è —Å–ª–µ–¥—É—é—â–∏–µ:\n–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ö–µ—à—Ç–µ–≥—É- ¬´#–¥–∞–π¬ª. –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ ¬´#–¥–∞–π –Ω—Ñ—Å 1–∫–∫¬ª, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ 3 –º–∏–Ω—É—Ç—ã , –µ—Å–ª–∏ —Å–∞–ø–ø–æ—Ä—Ç –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç –≤—ã–¥–∞—Ç—å, –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Å–∫–∏–¥–∫–∞ –≤ 0.5%.  –°–∞–ø–ø–æ—Ä—Ç –≤ –ø—Ä–∞–≤–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø –≤—Ä–µ–º—è (+3–º–∏–Ω),  . –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Å–∞–ø–ø –Ω–µ —É—Å–ø–µ–µ—Ç –≤—ã–¥–∞—Ç—å —Ä–µ–∫ –∑–∞ –¥–æ–ø. –≤—Ä–µ–º—è  - % —É–¥–≤–∞–∏–≤–∞—é—Ç—Å—è –∏ —Å–∫–∏–¥–∫–∞ –Ω–∞ –≤—ã–¥–∞—á—É —Ä–µ–∫–∞ –±—É–¥–µ—Ç 1%",
            reply_markup=await markups.create_back_markup(AnswerCallbackData(action="automation_function_day").pack())
        )

@router.callback_query(AnswerCallbackData.filter(F.action == 'automation_function_rek'))
async def automation_function_rek_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    text="<b>–§—É–Ω–∫—Ü–∏—è –†–µ–∫</b>\n\n–°—Ç–∞—Ç—É—Å: {status}".format(status="‚úÖ –í–∫–ª—é—á–µ–Ω" if bot_user.function_rek else "üö´ –í—ã–∫–ª—é—á–µ–Ω")
    await bot.edit_message_text(
        text=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=await create_function_keyboard("on_function_rek", "off_function_rek", "instruction_function_rek")
    )

@router.callback_query(AnswerCallbackData.filter(F.action == 'on_function_rek'))
async def on_function_rek_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    bot_user.function_rek = True
    await bot_user.save()
    await callback.answer("‚úÖ –§—É–Ω–∫—Ü–∏—è –†–µ–∫ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞")
    await automation_function_rek_handler(callback, callback_data, state, bot_user)

@router.callback_query(AnswerCallbackData.filter(F.action == 'off_function_rek'))
async def off_function_rek_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    bot_user.function_rek = False
    await bot_user.save()
    await callback.answer("üö´ –§—É–Ω–∫—Ü–∏—è –†–µ–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–∞")
    await automation_function_rek_handler(callback, callback_data, state, bot_user)

@router.callback_query(AnswerCallbackData.filter(F.action == 'automation_function_day'))
async def automation_function_day_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    text="<b>–§—É–Ω–∫—Ü–∏—è –î–∞–π</b>\n\n–°—Ç–∞—Ç—É—Å: {status}".format(status="‚úÖ –í–∫–ª—é—á–µ–Ω" if bot_user.function_day else "üö´ –í—ã–∫–ª—é—á–µ–Ω")
    await bot.edit_message_text(
        text=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=await create_function_keyboard("on_function_day", "off_function_day", "instruction_function_day")
    )


@router.callback_query(AnswerCallbackData.filter(F.action == 'on_function_day'))
async def on_function_day_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    bot_user.function_day = True
    await bot_user.save()
    await callback.answer("‚úÖ –§—É–Ω–∫—Ü–∏—è –î–∞–π —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞")
    await automation_function_day_handler(callback, callback_data, state, bot_user)

@router.callback_query(AnswerCallbackData.filter(F.action == 'off_function_day'))
async def off_function_day_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    bot_user.function_day = False
    await bot_user.save()
    await callback.answer("üö´ –§—É–Ω–∫—Ü–∏—è –î–∞–π —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–∞")
    await automation_function_day_handler(callback, callback_data, state, bot_user)

async def create_function_keyboard(active_data, deactive_data, instruction_data):
    markup = (
        InlineKeyboardBuilder()
        .button(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=AnswerCallbackData(action=active_data).pack())
        .button(text="–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=AnswerCallbackData(action=deactive_data).pack())
        .button(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=AnswerCallbackData(action=instruction_data).pack())
        .button(text="–ù–∞–∑–∞–¥", callback_data=AnswerCallbackData(action="automation").pack())
        .adjust(1, repeat=True)
        .as_markup()
    )
    return markup

async def create_user_chat_markup(chats):
    markup = (
        InlineKeyboardBuilder()
        .add(*(types.InlineKeyboardButton(
            text="{chat_name}".format(chat_name=chat.name if chat.type == ChatRole.none else "‚úÖ {name}".format(name=chat.name)),
            callback_data=UserChatCallbackData(action='automation_selected_chat', data="", id=chat.id).pack(),
        ) for chat in chats))
        .button(text="–ù–∞–∑–∞–¥", callback_data=AnswerCallbackData(action='automation_add_rek').pack())
        .adjust(1, repeat=True)
        .as_markup()
    )
    return markup
