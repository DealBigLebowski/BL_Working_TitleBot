from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F, types
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext


from ... import markups
from ...bot import bot
from ...state import Action
from . import router
from ...callback_data import AnswerCallbackData, UserPeopleCallbackData
from ...services.database.models import BotUser, UserChat, UserChatAdvertising, UserPeople
from ...enums import ChatRole

router.message.filter(F.chat.type == "private")


acd = AnswerCallbackData(action='demo')

@router.callback_query(AnswerCallbackData.filter(F.action == 'other'))
async def other_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await bot.edit_message_text(
        text="<b>–ö—Ä–∞–π–Ω—è–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=markups.other_markup
    )

@router.callback_query(AnswerCallbackData.filter(F.action == 'other_send_request'))
async def other_send_request_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await state.clear()
    text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å.\n\n–ü—Ä–∏–º–µ—Ä: –ù—É–∂–µ–Ω —Ä–µ–∫–≤–∏–∑–∏—Ç –ú–¢–° –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∞–ª–æ–Ω —Å–≤—è–∑–∏ –ú–¢–° –Ω–∞ 500–∫."
    await state.set_state(Action.wait_other_send_request)
    await state.set_data({"message_id": callback.message.message_id})
    await bot.edit_message_text(
            text=text,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=markups.cancel_markup
        )


@router.message(Action.wait_other_send_request)
async def wait_other_send_request_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    state_date = await state.get_data()
    
    user_people = await UserPeople.filter(bot_user=bot_user).prefetch_related("other_bot_user").all()
    if message.text:
        for user in user_people:
            await bot.send_message(user.other_bot_user.id,text=message.text)
        await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    else:
        return await message.answer("–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞", reply_markup=markups.cancel_markup)
            
    await state.clear()
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <b>" + message.from_user.first_name + "</b>!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è üëá" 
    await message.answer( text, reply_markup=markups.main_menu_markup )   

    await bot.delete_message(
        bot_user.id,
        state_date["message_id"]
    )

@router.callback_query(AnswerCallbackData.filter(F.action == 'other_people'))
async def notification_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    user_people = await UserPeople.filter(bot_user=bot_user).prefetch_related("other_bot_user").all()
    await bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=await create_user_people_markup(user_people)
    )

@router.callback_query(AnswerCallbackData.filter(F.action == 'other_instruciton'))
async def other_instruciton_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    back_markup = (
        InlineKeyboardBuilder()
        .button(text="–ù–∞–∑–∞–¥", callback_data=AnswerCallbackData(action='other').pack())
        .adjust(1, repeat=True)
        .as_markup()
    )
    text = "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ –Ω–∞–∂–∞—Ç–∏—é –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤—Å–µ–º –≤–∞—à–∏–º –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º –Ω–∞–ª—å—â–∏–∫–æ–≤ –∏–∑ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–¥ –≤–Ω–µ—Å–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å—Å—è —Å –Ω–∏–º –Ω–∞ —Ñ–æ—Ä—É–º–µ –æ–± —É—Å–ª–æ–≤–∏—è—Ö –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
    await bot.edit_message_text(
            text=text,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=back_markup
        )

@router.callback_query(AnswerCallbackData.filter(F.action == 'add_people'))
async def other_add_people_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await state.clear()
    text="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    await state.set_state(Action.wait_user_people)
    await state.set_data({"message_id": callback.message.message_id})
    await bot.edit_message_text(
            text=text,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=markups.cancel_markup
        )

@router.callback_query(UserPeopleCallbackData.filter(F.action == 'edit_user_people'))
async def edit_user_people_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    other_user = await BotUser.filter(id=callback_data.other_id).first()
    text="ID: {other_user.id}\n–ò–º—è: {other_user.first_name}\n–õ–æ–≥–∏–Ω: @{other_user.username}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:".format(other_user=other_user)
    
    action_markup = (
        InlineKeyboardBuilder()
        .button(text="–£–¥–∞–ª–∏—Ç—å", callback_data=UserPeopleCallbackData(action='remove_user_people', id=callback_data.id, other_id=callback_data.other_id).pack())
        .button(text="–ù–∞–∑–∞–¥", callback_data=AnswerCallbackData(action='other_people').pack())
        .adjust(1, repeat=True)
        .as_markup()
    )

    await bot.edit_message_text(
            text=text,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=action_markup
        )

@router.callback_query(UserPeopleCallbackData.filter(F.action == 'remove_user_people'))
async def edit_user_people_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    user_people = await UserPeople.filter(id=callback_data.id).first()
    if user_people:
        await user_people.delete()

    action_markup = (
        InlineKeyboardBuilder()
        .button(text="–ù–∞–∑–∞–¥", callback_data=AnswerCallbackData(action='other_people').pack())
        .adjust(1, repeat=True)
        .as_markup()
    )

    await bot.edit_message_text(
            text="‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã",
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=action_markup
        )

    
@router.message(Action.wait_user_people)
async def wait_user_people_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    state_date = await state.get_data()
    username = message.text.replace("@", "")
    other_user = await BotUser.filter(username=username).first()
    if other_user is None:
        return await message.answer("–û—à–∏–±–∫–∞, –ª–æ–≥–∏–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" , reply_markup=markups.cancel_markup)
    else:
        if other_user.id == bot_user.id:
            return await message.answer("–û—à–∏–±–∫–∞, –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è", reply_markup=markups.cancel_markup)
        user_people = await UserPeople.filter(bot_user=bot_user, other_bot_user=other_user).first()
        if user_people is None:
            user_people = await UserPeople.create(
                bot_user=bot_user,
                other_bot_user=other_user
            )
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            return await message.answer("–û—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫", reply_markup=markups.cancel_markup)   
            
    await state.clear()
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <b>" + message.from_user.first_name + "</b>!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è üëá" 
    await message.answer( text, reply_markup=markups.main_menu_markup )   

    await bot.delete_message(
        bot_user.id,
        state_date["message_id"]
    )

async def create_user_people_markup(user_people):
    markup = (
        InlineKeyboardBuilder()
        .add(*(types.InlineKeyboardButton(
            text="{user.other_bot_user.id}|{user.other_bot_user.username}".format(user=user),
            callback_data=UserPeopleCallbackData(action='edit_user_people', id=user.id, other_id=user.other_bot_user.id).pack(),
        ) for user in user_people))
        .button(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ", callback_data=AnswerCallbackData(action='add_people').pack())
        .button(text="–ù–∞–∑–∞–¥", callback_data=AnswerCallbackData(action='other').pack())
        .adjust(1, repeat=True)
        .as_markup()
    )
    return markup