import uuid

from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F, types
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext


from ... import markups
from ...bot import bot
from ...state import Action
from . import router
from ...callback_data import AnswerCallbackData, CloverBountyCallbackData, UserChatCallbackData
from ...services.database.models import BotUser, UserChat, CloverBounty, Clover
from ...enums import CloverBountyType, ChatRole

router.message.filter(F.chat.type == "private")


acd = AnswerCallbackData(action='demo')

@router.callback_query(AnswerCallbackData.filter(F.action == 'interactives'))
async def interactives_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await bot.edit_message_text(
        text="<b>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=markups.interactives_markup
    )

@router.callback_query(AnswerCallbackData.filter(F.action == 'interactives_instruciton'))
async def instruction_interactives_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await callback.answer("‚ùï –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ–∂–∏–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –ø—É—Ç–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—Ä–∏–∑–æ–≤. –ü—Ä–∏–∑—ã –≤—ã —Ä–∞–∑–º–µ—â–∞–µ—Ç–µ —Å–∞–º–∏, –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç–µ —Å—Ç–∞—Ä—ã–µ. –ü—Ä–µ—Ç–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–∏–∑—ã –º–æ–≥—É—Ç –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ö–æ—Ç—å 1 ¬´–ë–∏–ª–µ—Ç –£–¥–∞—á–∏¬ª", True)

@router.callback_query(AnswerCallbackData.filter(F.action == 'setting_get_status'))
async def setting_get_status_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await callback.answer("‚ùï None", True)

@router.callback_query(AnswerCallbackData.filter(F.action == 'interactives_add_clover_bounty'))
async def setting_set_support_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    clover_bounty = await CloverBounty.filter(bot_user=bot_user).all()
    await bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–∑–æ–≤:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=await create_clover_bounty_markup(clover_bounty)
    )

@router.callback_query(AnswerCallbackData.filter(F.action == 'interactives_set_clover_amount'))
async def add_support_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await state.clear()
    text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É. –î–∞–ª–µ–µ –≤—Å–µ –ö–¶/–õ–µ–π–∫–∏ –ø—Ä–æ–ª–∏–≤—à–∏–µ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã –∑–∞ —Å—É—Ç–∫–∏ –ø–æ–ª—É—á–∞—Ç ¬´–ë–∏–ª–µ—Ç –£–¥–∞—á–∏¬ª –∏ —Å –µ–≥–æ –ø–æ–º–æ—â—å—é —Å–º–æ–≥—É—Ç —Ä–∞–∑—ã–≥—Ä–∞—Ç—å —Å –≤–∞–º–∏ –ø—Ä–∏–∑.\n\n–ü—Ä–∏–º–µ—Ä: 1.000.000"
    await state.set_state(Action.wait_clover_limit_amount)
    await state.set_data({"message_id": callback.message.message_id})
    await bot.edit_message_text(
            text=text,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=markups.cancel_markup
        )

@router.message(Action.wait_clover_limit_amount)
async def wait_support_username_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    
    amount = message.text.replace(".", "")
    if amount.isnumeric():
        bot_user.clover_limit = amount
        await bot_user.save()
        await message.answer("‚úÖ –£—Å–ª–æ–≤–∏—è –¥–ª—è –±–∏–ª–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    else:
        return await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞, –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" , reply_markup=markups.cancel_markup)
        
            
    await state.clear()
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <b>" + message.from_user.first_name + "</b>!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è üëá" 
    await message.answer( text, reply_markup=markups.main_menu_markup )   
    state_date = await state.get_data()

    await bot.delete_message(
        bot_user.id,
        state_date["message_id"]
    )

@router.callback_query(CloverBountyCallbackData.filter(F.action == 'edit_clover_bounty'))
async def edit_clover_bounty_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    await state.clear()
    await state.set_data({"message_id": callback.message.message_id, "clover_bounty_id": callback_data.id})
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–∑–∞:"
    await bot.edit_message_text(
            text=text,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=markups.bounty_clover_count
        )
    # text="–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞.\n\n–ü—Ä–∏–º–µ—Ä: ¬´1000 —Å—Ç—Ä–æ–∫ –±–∞–∑—ã¬ª; ¬´50$ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏¬ª"
    # await state.set_state(Action.wait_clover_bounty_data)
    # await bot.edit_message_text(
    #         text=text,
    #         chat_id=callback.message.chat.id,
    #         message_id=callback.message.message_id,
    #         reply_markup=markups.cancel_markup
    #     )

@router.callback_query(CloverBountyCallbackData.filter(F.action == 'bounty_clover_count'))
async def bounty_clover_count_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    state_date = await state.get_data()
    state_date["clover_count"] = callback_data.id
    await state.set_data(state_date)
    text="–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞.\n\n–ü—Ä–∏–º–µ—Ä: ¬´1000 —Å—Ç—Ä–æ–∫ –±–∞–∑—ã¬ª; ¬´50$ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏¬ª"
    await state.set_state(Action.wait_clover_bounty_data)
    await bot.edit_message_text(
            text=text,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=markups.cancel_markup
        )

@router.message(Action.wait_clover_bounty_data)
async def wait_support_username_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    state_date = await state.get_data()
    clover_bounty = await CloverBounty.filter(id=state_date["clover_bounty_id"]).first()
    if clover_bounty is None:
        await CloverBounty.create(
            bot_user=bot_user,
            type=CloverBountyType.text,
            data=message.text,
            clover_count=state_date['clover_count']
        )
    else:
        clover_bounty.data = message.text
        clover_bounty.clover_count=state_date['clover_count']
        await clover_bounty.save()
    
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
    await state.clear()
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <b>" + message.from_user.first_name + "</b>!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è üëá" 
    await message.answer( text, reply_markup=markups.main_menu_markup )   

    await bot.delete_message(
        bot_user.id,
        state_date["message_id"]
    )


@router.callback_query(AnswerCallbackData.filter(F.action == 'interactives_issue_clover'))
async def add_support_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    user_chats = await UserChat.filter(bot_user=bot_user, type=ChatRole.cc).all()
    if len(user_chats) == 0:
        return await callback.answer("üö´ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ö–¶/–õ–µ–π–∫–∏ –ø—É—Å—Ç", True)

    await bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω–æ–π ¬´–ë–∏–ª–µ—Ç —É–¥–∞—á–∏¬ª:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=await create_notify_chats_markup(user_chats)
    )

@router.callback_query(UserChatCallbackData.filter(F.action == 'issue_clover'))
async def add_support_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=callback_data.id).first()
    if user_chat is None:
        return await callback.answer("üö´ –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", True)
    
    clover = await Clover.filter(user_chat=user_chat).first()
    if clover is None:
        clover = await Clover.create(
            user_chat=user_chat,
            count=1
        )
    else:
        if clover.count >= 3:
            return await callback.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ 3" , True)
        clover.count = clover.count + 1
        await clover.save()

    back_markup = (
        InlineKeyboardBuilder()
        .button(text="–ù–∞–∑–∞–¥", callback_data=AnswerCallbackData(action='interactives_issue_clover').pack())
        .adjust(1, repeat=True)
        .as_markup()
    )
    text = "üéüÔ∏è –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ë–∏–ª–µ—Ç–∞\n\nüí¨ –ß–∞—Ç:  {user_chat.name}\nüéüÔ∏è –ë–∏–ª–µ—Ç–æ–≤: {clover.count}".format(user_chat=user_chat, clover=clover)

    await bot.edit_message_text(
        text=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=back_markup
    ) 

async def create_clover_bounty_markup(clover_bounty):
    markup = (
        InlineKeyboardBuilder()
        .add(*(types.InlineKeyboardButton(
            text="üéüÔ∏è {clover_count} - ({text}...)".format(text=clover.data[:10],clover_count=clover.clover_count),
            callback_data=CloverBountyCallbackData(action='edit_clover_bounty', id=clover.id).pack(),
        ) for clover in clover_bounty))
        .add(*(types.InlineKeyboardButton(
            text="[             ]",
            callback_data=CloverBountyCallbackData(action='edit_clover_bounty', id=0).pack(),
        ) for clover in range(4 - len(clover_bounty))))
        .button(text="–ù–∞–∑–∞–¥", callback_data=AnswerCallbackData(action='interactives').pack())
        .adjust(1, repeat=True)
        .as_markup()
    )
    return markup

async def create_notify_chats_markup(chats):
    markup = (
        InlineKeyboardBuilder()
        .add(*(types.InlineKeyboardButton(
            text="{chat.name}".format(chat=chat),
            callback_data=UserChatCallbackData(action='issue_clover', data="cc", id=chat.id).pack(),
        ) for chat in chats))
        .button(text="–ù–∞–∑–∞–¥", callback_data=AnswerCallbackData(action='interactives').pack())
        .adjust(1, repeat=True)
        .as_markup()
    )
    return markup