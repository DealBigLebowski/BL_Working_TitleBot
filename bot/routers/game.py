from aiogram import F, types
from aiogram.filters.command import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.filters import IS_NOT_MEMBER, IS_MEMBER, ChatMemberUpdatedFilter, IS_ADMIN
from aiogram.types import CallbackQuery
from tortoise.contrib.sqlite.functions import Random


from .. import markups
from ..bot import bot
from ..services.database.models import BotUser, UserChat, Clover, Game, GameAction, CloverBounty
from ..enums import GameStatus
from ..utils.router import Router
from . import root_handlers_router
from ..state import Action
from ..callback_data import  GameActionCallbackData

router = Router()
root_handlers_router.include_router(router)

@router.message(F.chat.type != "private", F.text == '/game')
async def status_info_handler(message: types.Message, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()    
    clover = await Clover.filter(user_chat=user_chat).first()
    if clover:
        if clover.count != 0:
            game = await Game.filter(user_chat=user_chat, status=GameStatus.active).first()
            if game is None:
                await Game.create(
                    user_chat=user_chat,
                    bot_user=bot_user,
                    steep="wait_clover",
                    clover_count=0,
                    status=GameStatus.active
                )
                text = "–£ —Ç–µ–±—è –µ—Å—Ç—å <b>{clover.count}</b> üéü –¥–ª—è –∏–≥—Ä—ã. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å 1 üéü –∏–ª–∏ –æ—Ç–ª–æ–∂–∏—Ç—å –∏ —Å—ã–≥—Ä–∞—Ç—å –ø–æ–∑–∂–µ –∑–∞ <b>3</b> üéü, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –±–æ–ª–µ–µ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã üéÅ\n\n–ü–æ–º–Ω–∏, –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –≤–∞–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–º–µ–ª–æ –Ω–∞—á–∏–Ω–∞—Ç—å, –Ω–æ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ üéü ü§ò\n\n–£–¥–∞—á–∞ —Å–æ–ø—É—Ç—Å—Ç–≤—É–µ—Ç —Å–º–µ–ª—ã–º! \n\nüí°–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ , —É —Ç–µ–±—è –¥–æ—Å—Ç—É–ø–Ω–æ <b>{clover.count}</b> üéüÔ∏è".format(clover=clover)
                await message.answer(text=text, reply_markup=markups.game_clover_markup)
            else:
                text = "–ë—Ä–æ. –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞, –ø–æ–∂–∞–ª—É—Å—Ç–∞ –æ—Ç–º–µ–Ω–∏ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
                await message.answer(text=text, reply_markup=markups.game_cancel_markup)

@router.callback_query(GameActionCallbackData.filter(F.action == 'cancel'))
async def set_rates_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=callback.message.chat.id).prefetch_related("bot_user").first()
    game = await Game.filter(user_chat=user_chat, status=GameStatus.active).first()
    if game:
        if game.bot_user_id == bot_user.id:
            await game.delete()
            await callback.message.edit_text("‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        else:
            await callback.answer("‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–≥—Ä—ã", True)
    else:
        await callback.message.edit_text("üîç –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

@router.callback_query(GameActionCallbackData.filter(F.action == 'set_username'))
async def set_rates_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=callback.message.chat.id).prefetch_related("bot_user").first()
    game = await Game.filter(user_chat=user_chat, bot_user=bot_user, status=GameStatus.active).first()
    if game:
        clover = await Clover.filter(user_chat=user_chat).first()
        if clover.count >= int(callback_data.data):
            await state.set_state(Action.wait_game_username)  
            game.clover_count = int(callback_data.data)
            game.steep = "wait_username"
            await game.save()
            text = "üí° –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –°–ø–∞—Ä—Ä–∏–Ω–≥:\n–®–∞–≥ 1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑, —Å –∫–µ–º –±—É–¥–µ—à—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞. –í —Ñ–æ—Ä–º–∞—Ç–µ: @userTakoyTo\n\n<i>–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –∏–Ω–æ–≥–¥–∞ –≤–∞–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–∂–¥–∞—Ç—å, –Ω–æ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å —É—Ä–æ–∫–∏ –≤ –ø–æ—Ä–∞–∂–µ–Ω–∏—è—Ö. üåê‚úåÔ∏è</i>"
            await callback.message.edit_text(text=text, reply_markup=markups.game_cancel_markup)
        else:
            await callback.answer("‚ùóÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", True)

@router.message(Action.wait_game_username, F.text)
async def wait_set_rates_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).first()
    game = await Game.filter(user_chat=user_chat, bot_user=bot_user, status=GameStatus.active).first()
    if game:
        await state.clear()
        username = message.text.replace("@", "")
        text = "–®–∞–≥2. –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∏–≥—Ä –Ω–∏–∂–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:"
        game_type_markup = (
            InlineKeyboardBuilder()
            .button(text="üé≤ –ö–æ—Å—Ç–∏", callback_data=GameActionCallbackData(game_id=0, action='game', data='üé≤', other_data=username).pack())
            .button(text="üé≥ –ë–æ—É–ª–∏–Ω–≥", callback_data=GameActionCallbackData(game_id=0,action='game', data='üé≥', other_data=username).pack())
            .button(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data=GameActionCallbackData(game_id=0, action='game', data='üèÄ', other_data=username).pack())
            .button(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=GameActionCallbackData(game_id=0, action='cancel', data='', other_data='').pack())
            .adjust(1, repeat=True)
            .as_markup()
        )
        await message.answer(text=text, reply_markup=game_type_markup)
    else:
        await state.clear()

@router.callback_query(GameActionCallbackData.filter(F.action == 'game'))
async def set_rates_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=callback.message.chat.id).first()
    game = await Game.filter(user_chat=user_chat, bot_user=bot_user, status=GameStatus.active).first()
    if game:
        if callback_data.data == 'üé≤':
            text = "–¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É üé≤ –ö–æ—Å—Ç–∏. –ü—Ä–∞–≤–∏–ª–∞: –∏–≥—Ä–∞ –¥–æ —Ç—Ä–µ—Ö –ø–æ–±–µ–¥.\n–ü–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫, –Ω–∞–±—Ä–∞–≤—à–∏–π —Ç—Ä–∏ —Ä–∞–∑–∞ –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤, –≤—ã–±—Ä–æ—Å–∞—è –∫–æ—Å—Ç–∏"
        elif callback_data.data == 'üé≥':
            text = "–¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É üé≥ –ë–æ—É–ª–∏–Ω–≥. –ü—Ä–∞–≤–∏–ª–∞: –∏–≥—Ä–∞ –¥–æ —Ç—Ä–µ—Ö –ø–æ–±–µ–¥.\n–ü–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫, –Ω–∞–±—Ä–∞–≤—à–∏–π —Ç—Ä–∏ —Ä–∞–∑–∞ –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤, —Å–±–∏–≤ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–¥–ª–µ–π"
        elif callback_data.data == 'üèÄ':
            text = "–¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª. –ü—Ä–∞–≤–∏–ª–∞: –∏–≥—Ä–∞ –¥–æ —Ç—Ä–µ—Ö –ø–æ–±–µ–¥.\n–ü–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫, –Ω–∞–±—Ä–∞–≤—à–∏–π —Ç—Ä–∏ —Ä–∞–∑–∞ –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤."
        
        other_bot_user = await BotUser.filter(username=callback_data.other_data).first()
        if other_bot_user is None:
            other_bot_user = bot_user
        await GameAction.create(
            game=game,
            game_type=callback_data.data,
            bot_user=bot_user,
            move=other_bot_user
        )   
        start_game_markup = (
            InlineKeyboardBuilder()
            .button(text="‚ô†Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=GameActionCallbackData(game_id=game.id, action='start_game', data=callback_data.data, other_data=callback_data.other_data).pack())
            .button(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=GameActionCallbackData(game_id=0, action='cancel', data='', other_data='').pack())
            .adjust(1, repeat=True)
            .as_markup()
        )
        text += "\n\n<i>‚ùï –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ @{callback_data.other_data}</i>".format(callback_data=callback_data)
        await callback.message.edit_text(text=text,reply_markup=start_game_markup)

@router.callback_query(GameActionCallbackData.filter(F.action == 'start_game'))
async def set_rates_handler(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot_user: BotUser):
    if bot_user.username == callback_data.other_data:
        user_chat = await UserChat.filter(id=callback.message.chat.id).first()
        game = await Game.filter(user_chat=user_chat, status=GameStatus.active).prefetch_related("bot_user").first()
        if game:
            game_action = await GameAction.filter(game=game).first()
            if callback_data.data == 'üé≤':
                game_type = "üé≤ –ö–æ—Å—Ç–∏."
            elif callback_data.data == 'üé≥':
                game_type = "üé≥ –ë–æ—É–ª–∏–Ω–≥."
            elif callback_data.data == 'üèÄ':
                game_type = "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª."
            await callback.message.delete()
            game.steep = 'start_game'
            await game.save()
            game_action.bot_user = bot_user
            await game_action.save()
            text = "‚ô†Ô∏è –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å\n\nüïπ –¢–∏–ø –∏–≥—Ä—ã: {game_type}\nüë§ –ò–≥—Ä–æ–∫ @{game.bot_user.username} - 0\nüë§ –ò–≥—Ä–æ–∫ @{game_action.bot_user.username} - 0\n\n<i>‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∂–∏</i> {game_action.game_type}".format(
                game=game,
                game_action=game_action,
                game_type=game_type,
            )
            await callback.message.answer(text=text)
            text = "–•–æ–¥–∏—Ç @{game_action.bot_user.username}".format(game_action=game_action)
            await callback.message.answer(text=text)


@router.message(F.dice)
async def wait_set_rates_handler(message: types.Message, state: FSMContext, bot_user: BotUser):
    user_chat = await UserChat.filter(id=message.chat.id).prefetch_related("bot_user").first()
    game = await Game.filter(user_chat=user_chat, steep='start_game', status=GameStatus.active).prefetch_related("bot_user").first()
    if game:
        end_game = False
        game_action = await GameAction.filter(game=game, move=bot_user).prefetch_related("move", "bot_user").first()
        if game_action:
            if game_action.game_type == message.dice.emoji:
                dice_value = message.dice.value
                if game_action.game_type == 'üèÄ':
                    if dice_value <= 3:
                        dice_value = 1
                    else:
                        dice_value = 2
            if game_action.move == game_action.bot_user:
                game_action.move = game.bot_user
                game_action.score = dice_value
            else:
                game_action.move = game_action.bot_user
                game_action.other_score = dice_value
            
            await game_action.save()

            if game_action.raund == 2:
                win_username = ""
                if game_action.score == game_action.other_score:
                    await message.answer("–ù–∏—á—å—è")
                elif game_action.score > game_action.other_score:
                    game.other_score = game.other_score + 1
                    win_username = game_action.bot_user.username
                    looser = game.bot_user.username
                else:
                    game.score = game.score + 1
                    win_username = game.bot_user.username
                    looser = game_action.bot_user.username
                await game.save()
                if win_username:
                    if game.score == 3:
                        win_bot_user = game.bot_user
                        end_game = True
                    elif game.other_score == 3:
                        win_bot_user = game_action.bot_user
                        end_game = True
                    else:
                        text = "üí• –í—ã–∏–≥—Ä–∞–ª @{win_username}\n\nüïπ –¢–∏–ø –∏–≥—Ä—ã: {game_action.game_type}\nüë§ –ò–≥—Ä–æ–∫ @{game.bot_user.username} - {game.score}\nüë§ –ò–≥—Ä–æ–∫ @{game_action.bot_user.username} - {game.other_score}\nüéüÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤ {game.clover_count}".format(
                            game=game,
                            game_action=game_action,
                            win_username=win_username
                        )
                        await message.answer(text=text)
                    if end_game:
                        text = "üí• –í—ã–∏–≥—Ä–∞–ª @{win_username}\n\nüïπ –¢–∏–ø –∏–≥—Ä—ã: {game_action.game_type}\nüë§ –ò–≥—Ä–æ–∫ @{game.bot_user.username} - {game.score}\nüë§ –ò–≥—Ä–æ–∫ @{game_action.bot_user.username} - {game.other_score}\nüéüÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤ {game.clover_count}".format(
                            game=game,
                            game_action=game_action,
                            win_username=win_username
                        )
                        await message.answer(text=text)
                        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{win_username} –≤—ã–∏–≥—Ä–∞–ª!".format(win_username=win_username))
                        clover = await Clover.filter(user_chat=user_chat).first()
                        clover.count = clover.count - game.clover_count
                        await clover.save()
                        clover_bounty = await CloverBounty.filter(bot_user=user_chat.bot_user, clover_count=game.clover_count).annotate(random=Random()).order_by("random").first()
                        if clover_bounty:
                            await message.answer(clover_bounty.data)
                        else:
                            await message.answer("ü•π –¢—ã –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä—É, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–∏–∑–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å")
                        
                        game.status = GameStatus.inactive
                        await game.save()
                game_action.score = 0
                game_action.other_score = 0
                game_action.raund = 1
                await game_action.save()
            else:
                game_action.raund = 2
                await game_action.save()
            if not end_game:
                await message.answer("–•–æ–¥–∏—Ç @{game_action.move.username}".format(game_action=game_action))


            
                
