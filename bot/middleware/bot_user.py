from typing import Any, Awaitable, Callable, Dict

from aiogram import types
from aiogram.dispatcher.middlewares.base import BaseMiddleware

from ..protocols.telegram_user_event import TelegramUserEvent
from ..services.database.models import BotUser, CloverBounty
from ..models.phrases.bot_phrases import BotPhrases
from ..enums import UserRole, CloverBountyType
from ..bot import bot

class BotUserMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramUserEvent, Dict[str, Any]], Awaitable[Any]],
        event: TelegramUserEvent,
        data: Dict[str, Any],
    ) -> Any:
        from_user: types.User = event.from_user  # type: ignore

        bot_user = await BotUser.filter(id=from_user.id).first()
        if bot_user:
            bot_user.username = from_user.username
            bot_user.first_name = from_user.first_name
            bot_user.last_name = from_user.last_name
            await bot_user.save()
        else:
            bot_user = await BotUser.create(
                id=from_user.id, 
                username=from_user.username, 
                first_name=from_user.first_name,
                last_name=from_user.last_name,
                role=UserRole.user
            )
        data["bot_user"] = bot_user
        clover_bounty = await CloverBounty.filter(bot_user=bot_user).first()
        if clover_bounty is None:
            bounty_array = [
                {"data": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é ü§ë\n–¢—ã –≤—ã–π–≥—Ä–∞–ª –∞–≤–∞—Ç–∞—Ä–∫—É/—Å—Ç–∏–∫–µ—Ä –æ—Ç –Ω–∞—à–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ ‚ô†Ô∏è", "clover_count": 1},
                {"data": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é ü§ë–°–∫–∏–¥–∫–∞ 1% –∞–ª—å—Ñ–∞ –∫—ç—à . 1 –¥–µ–Ω—å.", "clover_count": 1},
                {"data": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é ü§ë\n–°–∫–∏–¥–∫–∞ 1% —Ñ–∏–∑ –∏–ª–∏ –Ω–∞ –ª—é–±–æ–π –∏–∑ –∑–∞–ª–∏–≤–æ–≤ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å .", "clover_count": 1},
                {"data": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é ü§ë\n–¢—ã –≤—ã–π–≥—Ä–∞–ª –±–∞–ª–∞–Ω—Å –Ω–∞ —É—Å–ª—É–≥–∏ –Ω–∞—à–µ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ 50$", "clover_count": 2},
                {"data": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é ü§ë\n–°–∫–∏–¥–∫–∞ 2% –∏–Ω–∫–∞—Å . 1 –¥–µ–Ω—å .", "clover_count": 2},
                {"data": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é ü§ë\n–¢–ì –Ω–∞ 3 –º–µ—Å—è—Ü–∞ üéÅ", "clover_count": 2},
                {"data": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é ü§ë\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª –±–∞–ª–∞–Ω—Å –Ω–∞ —É—Å–ª—É–≥–∏ –Ω–∞—à–µ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ 80$ .", "clover_count": 2}
            ]
            for bounty in bounty_array:
                await CloverBounty.create(
                    bot_user=bot_user,
                    type=CloverBountyType.text,
                    data=bounty['data'],
                    clover_count=bounty['clover_count']
                )

        return await handler(event, data)
